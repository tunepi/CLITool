<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class GitSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        DB::table('gits')->insert([
            [
                'git_name' => 'git',
                'git_type' => 1,
                'description' => 'Git は、高レベルの操作と内部へのフル アクセスの両方を提供する非常に豊富なコマンド セットを備えた、高速でスケーラブルな分散型リビジョン コントロール システムです。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git config',
                'git_type' => 1,
                'description' => 'オプションを照会/設定/置換/設定解除することができる。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git help',
                'git_type' => 1,
                'description' => 'Git に関するヘルプ情報を表示します。オプションとしてコマンドまたはその他のドキュメントを指定すると、関連するマニュアル ページが表示されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git bugreport',
                'git_type' => 1,
                'description' => 'ユーザーがバグ レポートを提出するための情報を収集します。ユーザーのマシン、Git クライアント、リポジトリの状態に関する情報、およびユーザーが観察した動作に関する情報を要求するフォームを 1 つのテキスト ファイルにキャプチャし、ユーザーはそれを Git メーリング リストなどで共有できます。観測されたバグを報告します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git init',
                'git_type' => 2,
                'description' => '空の Git リポジトリを作成するか、既存のリポジトリを再初期化します。作成されるのはテンプレートファイルの.git サブディレクトリを含むディレクトリobjectsかつコミットのない最初のブランチです。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git clone',
                'git_type' => 2,
                'description' => 'リポジトリを新しいディレクトリに複製します。新しく作成されたディレクトリにリポジトリを複製し、複製されたリポジトリ内の各ブランチのリモート追跡ブランチを作成し、複製されたリポジトリの現在アクティブなブランチからフォークされた初期ブランチを作成してチェックアウトします。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git add',
                'git_type' => 3,
                'description' => 'ファイルの内容をインデックスに追加します。作業ツリーで見つかった現在のコンテンツを使用してインデックスを更新し、次のコミットのためにステージングされたコンテンツを準備します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git status',
                'git_type' => 3,
                'description' => '作業ツリーのステータスを表示します。インデックスファイルと現在の HEAD コミットの間で違いがあるパス、作業ツリーとインデックスファイルの間で違いがあるパス、およびGitによって追跡されない (そしてgitignore によって無視されない) 作業ツリー内のパスを表示します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git diff',
                'git_type' => 3,
                'description' => 'コミット間、コミットと作業ツリーなどの変更を表示します。作業ツリーとインデックスまたはツリー間の変更、インデックスとツリー間の変更、2 つのツリー間の変更、マージによる変更、2 つの BLOB オブジェクト間の変更、またはディスク上の 2 つのファイル間の変更を表示します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git commit',
                'git_type' => 3,
                'description' => '変更をリポジトリに記録します。インデックスの現在の内容と、変更を説明する特定のログ メッセージを含む新しいコミットを作成します。新しいコミットは HEAD の直接の子であり、通常は現在のブランチの先端であり、ブランチはそれを指すように更新されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git notes',
                'git_type' => 3,
                'description' => 'オブジェクトのメモを追加または検査する。コミット自体を変更せずにコミット メッセージを補足するメモを追加、削除、または読み取ります。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git restore',
                'git_type' => 3,
                'description' => '作業ツリー ファイルを復元します。復元元のコンテンツを使用して、作業ツリー内の指定されたパスを復元します。パスが追跡されているが、復元ソースに存在しない場合は、ソースと一致するように削除されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git reset',
                'git_type' => 3,
                'description' => '現在の HEAD を指定された状態にリセットします。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git rm',
                'git_type' => 3,
                'description' => '作業ツリーとインデックスからファイルを削除します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git mv',
                'git_type' => 3,
                'description' => 'ファイル、ディレクトリ、またはシンボリック リンクを移動または名前変更します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git branch',
                'git_type' => 4,
                'description' => 'ブランチの一覧表示、作成、または削除します。引数がない場合、ブランチ一覧を表示し、オプションがあればオプション処理が実行される。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git checkout',
                'git_type' => 4,
                'description' => 'ブランチを切り替えるか、作業ツリーファイルを復元します。作業ツリーのファイルを更新して、インデックスまたは指定されたツリーのバージョンと一致させます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git switch',
                'git_type' => 4,
                'description' => 'ブランチを切り替えます。作業ツリーとインデックスは、ブランチに一致するように更新されます。すべての新しいコミットは、このブランチの先端に追加されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git merge',
                'git_type' => 4,
                'description' => '2つ以上の開発履歴を結合します。名前付きコミットからの変更を (履歴が現在のブランチから分岐してから) 現在のブランチに組み込みます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git mergetool',
                'git_type' => 4,
                'description' => 'マージ競合解決ツールを実行してマージ競合を解決します。1 つ以上の <file> パラメーターが指定されている場合、マージ ツール プログラムが実行され、各ファイルの違いが解決されます (競合のないものはスキップされます)。ディレクトリを指定すると、そのパスにあるすべての未解決のファイルが含まれます。<file> 名が指定されていない場合、git mergetoolは、マージの競合があるすべてのファイルに対してマージ ツール プログラムを実行します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git log',
                'git_type' => 4,
                'description' => 'コミット ログを表示します。デフォルトでは、出力は時系列の逆順に表示されます。結果をさらに制限するために、他のさまざまなオプションとパス パラメータを使用できます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git stash',
                'git_type' => 4,
                'description' => 'ファイルの変更内容を見えない作業ディレクトリに隠します。作業ディレクトリとインデックスの現在の状態を記録したいが、クリーンな作業ディレクトリに戻りたい場合に使用します。このコマンドは、ローカルの変更を保存し、コミットに一致するように作業ディレクトリを元に戻します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git tag',
                'git_type' => 4,
                'description' => 'GPG で署名されたタグ オブジェクトを作成、一覧表示、削除、または検証する。タグとはコミットに対して付与されるメモのようなもの。タグ付けした人・日時・コメントが格納される。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git worktree',
                'git_type' => 4,
                'description' => '複数の作業ツリーを管理します。ローカルリポジトリ内にあるブランチからさらにブランチを作成し並行して作業を行うことができる。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git fetch',
                'git_type' => 5,
                'description' => '別のリポジトリからオブジェクトと参照をダウンロードします。ダウンロード後、。リモート追跡ブランチが更新されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git pull',
                'git_type' => 5,
                'description' => '別のリポジトリまたはローカル ブランチから取得して統合します。リモート リポジトリからの変更を現在のブランチに組み込みます。現在のブランチがリモートの背後にある場合、デフォルトでは、現在のブランチを早送りしてリモートに一致させます。現在のブランチとリモートブランチが分岐している場合、オプションを使用して調整する必要があります。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git push',
                'git_type' => 5,
                'description' => '関連オブジェクトとともにリモート参照を更新します。指定された参照を完了するために必要なオブジェクトを送信しながら、ローカル参照を使用してリモート参照を更新します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git remote',
                'git_type' => 5,
                'description' => ' 追跡されたリポジトリのセットを管理します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git submodule',
                'git_type' => 5,
                'description' => 'サブモジュールの初期化、更新、または検査します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git show',
                'git_type' => 6,
                'description' => 'さまざまなタイプのオブジェクトを表示します。引数に1つ以上のオブジェクト (ブロブ、ツリー、タグ、およびコミット) を指定することで指定されたオブジェクトの内容を表示します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git range-diff',
                'git_type' => 6,
                'description' => '2つのコミット範囲を比較し差異を表示します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git shortlog',
                'git_type' => 6,
                'description' => ' git log出力を要約します。各コミットは、作成者とタイトルでグループ化されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git describe',
                'git_type' => 6,
                'description' => '利用可能な参照に基づいて、オブジェクトに人間が読める名前を付けます。このコマンドは、コミットから到達可能な最新のタグを見つけます。タグがコミットを指している場合、タグのみが表示されます。それ以外の場合は、タグ付けされたオブジェクトの上に追加のコミットの数と最新のコミットの省略されたオブジェクト名をタグ名の末尾に追加します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git apply',
                'git_type' => 7,
                'description' => 'ファイルやインデックスにパッチを適用します。提供されたdiff出力 (パッチ) を読み取り、それをファイルに適用します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git cherry-pick',
                'git_type' => 7,
                'description' => '既存のコミットによって導入された変更を適用します。1 つ以上の既存のコミットがある場合、それぞれが導入する変更を適用し、それぞれに新しいコミットを記録します。これには、作業ツリーがクリーンである必要があります。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git rebase',
                'git_type' => 7,
                'description' => '指定したコミットを、ブランチを変えて作り直したり、ひとまとめにしたりして、ログを綺麗にするコマンド。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git revert',
                'git_type' => 7,
                'description' => '既存のコミットを元に戻します。1 つ以上の既存のコミットがある場合、関連するパッチが導入した変更を元に戻し、それらを記録するいくつかの新しいコミットを記録します。これには、作業ツリーがクリーンである必要があります。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git bisect',
                'git_type' => 8,
                'description' => 'バイナリ検索を使用して、バグを導入したコミットを見つけます。このコマンドは、バイナリ検索アルゴリズムを使用して、プロジェクトの履歴のどのコミットがバグを導入したかを見つけます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git blame',
                'git_type' => 8,
                'description' => 'ファイルの各行を最後に変更したリビジョンと作成者を表示します。指定されたファイルの各行に、その行を最後に変更したリビジョンからの情報で注釈を付けます。オプションで、指定されたリビジョンから注釈を開始します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git grep',
                'git_type' => 8,
                'description' => 'パターンに一致する行を出力します。作業ツリー内の追跡対象ファイル、インデックス ファイルに登録された BLOB、または特定のツリー オブジェクト内の BLOB で指定されたパターンを探します。パターンは、改行文字で区切られた 1 つ以上の検索式のリストです。検索式としての空の文字列は、すべての行に一致します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git am',
                'git_type' => 9,
                'description' => 'メールボックスから一連のパッチを適用します。メールボックス内のメール メッセージをコミット ログ メッセージ、作成者情報、およびパッチに分割し、それらを現在のブランチに適用します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git format-patch',
                'git_type' => 9,
                'description' => '電子メール送信用のパッチを準備します。コミットごとに 1 つの「メッセージ」内の「パッチ」を含む各非マージ コミットを準備し、UNIX メールボックスに似た形式にします。このコマンドの出力は、電子メールの送信やgit amでの使用に便利です。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git send-email',
                'git_type' => 9,
                'description' => 'パッチのコレクションを電子メールとして送信します。コマンド ラインで指定されたパッチを取得し、電子メールで送信します。パッチは、ファイル、ディレクトリ (ディレクトリ内のすべてのファイルを送信します)、またはリビジョン リストとして直接指定できます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git request-pull',
                'git_type' => 9,
                'description' => '保留中の変更の概要を生成します。アップストリーム プロジェクトに変更をツリーにプルするように求める要求を生成します。標準出力に出力される要求は、ブランチの説明で始まり、変更を要約し、どこからプルできるかを示します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git svn',
                'git_type' => 10,
                'description' => 'リポジトリと Git 間の双方向操作を可能にします。Subversion と Git リポジトリ間の双方向の変更フローを提供します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git fast-import',
                'git_type' => 10,
                'description' => '高速 Git データ インポーターのバックエンドです。fast-import は、標準入力から混合コマンド/データ ストリームを読み取り、1 つまたは複数のパックファイルを現在のリポジトリに直接書き込みます。EOF が標準入力で受信されると、高速インポートは更新されたブランチとタグ ref を書き出し、現在のリポジトリを新しくインポートされたデータで完全に更新します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git clean',
                'git_type' => 11,
                'description' => '作業ツリーから追跡されていないファイルを削除します。現在のディレクトリから開始して、バージョン管理下にないファイルを再帰的に削除することにより、作業ツリーをクリーンアップします。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git gc',
                'git_type' => 11,
                'description' => '不要なファイルをクリーンアップし、ローカル リポジトリを最適化します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git fsck',
                'git_type' => 11,
                'description' => 'データベース内のオブジェクトの接続性と有効性を検証します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git reflog',
                'git_type' => 11,
                'description' => 'このコマンドは、reflog（参照ログ） に記録された情報を管理します。参照ログは、ブランチのヒントやその他の参照がローカル リポジトリで更新された日時を記録します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git instaweb',
                'git_type' => 11,
                'description' => 'ローカルリポジトリをweb上で参照するために使用するコマンド。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git archive',
                'git_type' => 11,
                'description' => '指定されたツリーのツリー構造を含む指定された形式のアーカイブを作成し、それを標準出力に書き出します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git bundle',
                'git_type' => 11,
                'description' => '「バンドル」ファイルを作成、解凍、および操作します。バンドルは、ネットワーク接続の反対側にあるアクティブな「サーバー」なしで、Git オブジェクトの「オフライン」転送に使用されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git daemon',
                'git_type' => 12,
                'description' => 'Gitリポジトリ用のサーバーを操作できるコマンド。通常はポート「DEFAULT_GIT_PORT」（別名 9418）でリッスンする非常に単純な TCP Git デーモンです。サービスを要求する接続を待機し、有効な場合はそのサービスを提供します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git update-server-info',
                'git_type' => 12,
                'description' => 'ダムサーバーを支援するために補助情報ファイルを更新します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git cat-file',
                'git_type' => 13,
                'description' => 'リポジトリ オブジェクトのコンテンツまたはタイプとサイズの情報を提供します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git check-ignore',
                'git_type' => 13,
                'description' => 'コマンドラインまたは を介し​​てファイルから指定されたパス名ごとに --stdin、ファイルが .gitignore (または除外メカニズムへの他の入力ファイル) によって除外されているかどうかを確認し、除外されている場合はパスを出力します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git checkout-index',
                'git_type' => 13,
                'description' => 'リストされたすべてのファイルをインデックスから作業ディレクトリにコピーします (既存のファイルを上書きしません)。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git count-objects',
                'git_type' => 13,
                'description' => 'アンパックされたオブジェクトの数とそれらのディスク消費量をカウントします。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git diff-index',
                'git_type' => 13,
                'description' => 'ツリー オブジェクトで見つかった BLOB のコンテンツとモードを、作業ツリー内の対応する追跡対象ファイル、またはインデックス内の対応するパスと比較します。<path> 引数が存在する場合、それらのパターンに一致するパスのみを比較します。それ以外の場合、すべての追跡ファイルが比較されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git for-each-ref',
                'git_type' => 13,
                'description' => '各 ref に関する情報を出力します',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git hash-object',
                'git_type' => 13,
                'description' => 'オブジェクトI を計算し、オプションでファイルからblobを作成します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git ls-files',
                'git_type' => 13,
                'description' => 'インデックスと作業ツリー内のファイルに関する情報を表示します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git ls-tree',
                'git_type' => 13,
                'description' => 'ツリー オブジェクトの内容を一覧表示します',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git merge-base',
                'git_type' => 13,
                'description' => 'マージのためにできるだけ良い共通の祖先を見つけます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git read-tree',
                'git_type' => 13,
                'description' => 'ツリー情報をインデックスに読み込みます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git rev-list',
                'git_type' => 13,
                'description' => 'コミット オブジェクトを新しい順に一覧表示します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git rev-parse',
                'git_type' => 13,
                'description' => '多くの Gitコマンドは、フラグ (つまり、ダッシュ-で始まるパラメーター) と、内部で使用する基になるgit rev-listコマンド用のパラメーターと、 git rev-listの下流で使用する他のコマンド用のフラグとパラメーターを組み合わせて使用​​します。このコマンドは、それらを区別するために使用されます。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git show-ref',
                'git_type' => 13,
                'description' => 'ローカル リポジトリの参照を一覧表示する。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git symbolic-ref',
                'git_type' => 13,
                'description' => 'シンボリック参照の読み取り、変更、および削除操作を行うコマンドです。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git update-index',
                'git_type' => 13,
                'description' => 'ワーキングツリーのファイル内容をインデックスに登録する',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git update-ref',
                'git_type' => 13,
                'description' => 'ref に保存されているオブジェクト名を安全に更新します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git verify-pack',
                'git_type' => 13,
                'description' => '圧縮された Git アーカイブ ファイルを検証します・',
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'git_name' => 'git write-tree',
                'git_type' => 13,
                'description' => '現在のインデックスからツリー オブジェクトを作成します。',
                'created_at' => now(),
                'updated_at' => now(),
            ],
        ]);
    }
}
